package com.thread.test.compile;

import javax.annotation.processing.AbstractProcessor;
import javax.annotation.processing.RoundEnvironment;
import javax.lang.model.element.Element;
import javax.lang.model.element.TypeElement;
import javax.tools.Diagnostic;
import javax.tools.JavaFileObject;
import java.beans.Introspector;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Set;

public class ToStringProcessor extends AbstractProcessor {
    @Override
    public boolean process(Set<? extends TypeElement> annotations,
                           RoundEnvironment currentRound) {
        if(annotations.size() ==0){
            return  true;
        }
        try {
            JavaFileObject sourceFile = processingEnv.getFiler().createSourceFile("compile.ToStrings");
            try(PrintWriter out = new PrintWriter(sourceFile.openWriter())){
                out.println("// Automatically generated by compile.ToStringAnnotationProcessor");
                out.println("package compile");
                out.println("public class ToStrings {");
                for (Element e : currentRound.getElementsAnnotatedWith(ToString.class)) {
                    if( e instanceof  TypeElement){
                        TypeElement te = (TypeElement) e;
                        write2StingMethod(out,te);
                    }

                }
                out.println("public static String toString(Object obj){");
                out.println("return java.util.Objects.toString(obj);");
                out.println("  }");
                out.println("}");

            }
        } catch (IOException e) {
            processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR,e.getMessage());
        }
        return true;
    }

    private void write2StingMethod(PrintWriter out, TypeElement te) {
        String className = te.getQualifiedName().toString();
        out.println("public static String toString("+className+ " obj){");
        ToString ann = te.getAnnotation(ToString.class);
        out.println("       StringBuilder sb = new StringBuilder();");
        if(ann.includeName()) out.println("     sb.append(\"" + className + "\"");
        out.println("       sb.append(\"[\"");
        boolean first = true;
        for(Element c: te.getEnclosedElements()){
            String methodName = c.getSimpleName().toString();
            ann = c.getAnnotation(ToString.class);
            if (null != ann){
                if(first) first = false; else out.println("      sbt.append(\",\");");
                if(ann.includeName()){
                    String filedName = Introspector.decapitalize(methodName.replaceAll("^(get|is)",""));
                    out.println("       sb.append(\""+ filedName + "=" + "\");");
                }
                out.println("       sb.append(\"]\");");
                out.println("       return sb.toString();");
                out.println("   }");
            }
        }

    }
}
